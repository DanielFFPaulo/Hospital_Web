// <auto-generated />
using System;
using Hospital_Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital_Web.Migrations
{
    [DbContext(typeof(Hospital_WebContext))]
    [Migration("20250612212329_CorrigirHerancaPessoaUtente")]
    partial class CorrigirHerancaPessoaUtente
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hospital_Web.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DeveAlterarSenha")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("FuncionarioLimpezaId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MedicoId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("UtenteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioLimpezaId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UtenteId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Hospital_Web.Models.Consulta", b =>
                {
                    b.Property<int>("Episodio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Episodio"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("GabineteID")
                        .HasColumnType("int");

                    b.Property<int>("Gabinete_Id")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Hora")
                        .HasColumnType("time");

                    b.Property<int?>("MedicoN_Processo")
                        .HasColumnType("int");

                    b.Property<int>("Medico_Id")
                        .HasColumnType("int");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Tratamento")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Utente_Id")
                        .HasColumnType("int");

                    b.HasKey("Episodio");

                    b.HasIndex("GabineteID");

                    b.HasIndex("Gabinete_Id");

                    b.HasIndex("MedicoN_Processo");

                    b.HasIndex("Medico_Id");

                    b.HasIndex("Utente_Id");

                    b.ToTable("Consulta");
                });

            modelBuilder.Entity("Hospital_Web.Models.Internamento", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("Consulta_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataHoraEntrada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataHoraSaida")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quarto_Id")
                        .HasColumnType("int");

                    b.Property<int>("Utente_Id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Consulta_Id");

                    b.HasIndex("Quarto_Id");

                    b.HasIndex("Utente_Id");

                    b.ToTable("Internamento");
                });

            modelBuilder.Entity("Hospital_Web.Models.LimpezaSala", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("Funcionario_Id")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Hora")
                        .HasColumnType("time");

                    b.Property<string>("Produto1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Produto2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Produto3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Sala_Id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Funcionario_Id");

                    b.HasIndex("Sala_Id");

                    b.ToTable("LimpezaSala");
                });

            modelBuilder.Entity("Hospital_Web.Models.Pessoa", b =>
                {
                    b.Property<int>("N_Processo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("N_Processo"));

                    b.Property<string>("Cod_Postal")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DataDeNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Grupo_Sanguineo")
                        .HasColumnType("int");

                    b.Property<string>("Localidade")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Morada")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NIF")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telemovel")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("TelemovelAlt")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<int>("sexo")
                        .HasColumnType("int");

                    b.HasKey("N_Processo");

                    b.ToTable("Pessoa");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Hospital_Web.Models.Sala", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Andar")
                        .HasColumnType("int");

                    b.Property<string>("Bloco")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Sala");

                    b.HasDiscriminator().HasValue("Sala");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Hospital_Web.Models.Utilizador", b =>
                {
                    b.Property<int>("ID_Utilizador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Utilizador"));

                    b.Property<DateTime>("Data_Criacao_Conta")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome_Utilizador")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Pessoa_Id")
                        .HasColumnType("int");

                    b.HasKey("ID_Utilizador");

                    b.HasIndex("Pessoa_Id")
                        .IsUnique()
                        .HasFilter("[Pessoa_Id] IS NOT NULL");

                    b.ToTable("Utilizador");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hospital_Web.Models.FuncionarioLimpeza", b =>
                {
                    b.HasBaseType("Hospital_Web.Models.Pessoa");

                    b.Property<string>("Certificacoes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Data_de_contratacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("Tamanho_Uniforme")
                        .HasColumnType("int");

                    b.Property<int>("Turno")
                        .HasColumnType("int");

                    b.ToTable("FuncionarioLimpeza");
                });

            modelBuilder.Entity("Hospital_Web.Models.Medico", b =>
                {
                    b.HasBaseType("Hospital_Web.Models.Pessoa");

                    b.Property<int>("Anos_de_experiencia")
                        .HasColumnType("int");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Numero_de_ordem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("Hospital_Web.Models.Utente", b =>
                {
                    b.HasBaseType("Hospital_Web.Models.Pessoa");

                    b.Property<string>("Alergias")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Data_de_Registo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Estado_clinico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Medico_Associado_Id")
                        .HasColumnType("int");

                    b.Property<string>("Seguro_de_Saude")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("Medico_Associado_Id");

                    b.ToTable("Utente");
                });

            modelBuilder.Entity("Hospital_Web.Models.Gabinete", b =>
                {
                    b.HasBaseType("Hospital_Web.Models.Sala");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Disponivel")
                        .HasColumnType("bit");

                    b.Property<string>("Equipamento")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("Sala", t =>
                        {
                            t.Property("Descricao")
                                .HasColumnName("Gabinete_Descricao");
                        });

                    b.HasDiscriminator().HasValue("Gabinete");
                });

            modelBuilder.Entity("Hospital_Web.Models.QuartosInternagem", b =>
                {
                    b.HasBaseType("Hospital_Web.Models.Sala");

                    b.Property<int>("Capacidade")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("QuartosInternagem");
                });

            modelBuilder.Entity("Hospital_Web.Models.ApplicationUser", b =>
                {
                    b.HasOne("Hospital_Web.Models.FuncionarioLimpeza", "FuncionarioLimpeza")
                        .WithMany()
                        .HasForeignKey("FuncionarioLimpezaId");

                    b.HasOne("Hospital_Web.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId");

                    b.HasOne("Hospital_Web.Models.Utente", "Utente")
                        .WithMany()
                        .HasForeignKey("UtenteId");

                    b.Navigation("FuncionarioLimpeza");

                    b.Navigation("Medico");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Hospital_Web.Models.Consulta", b =>
                {
                    b.HasOne("Hospital_Web.Models.Gabinete", null)
                        .WithMany("Consultas")
                        .HasForeignKey("GabineteID");

                    b.HasOne("Hospital_Web.Models.Gabinete", "Gabinete")
                        .WithMany()
                        .HasForeignKey("Gabinete_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hospital_Web.Models.Medico", null)
                        .WithMany("Consultas")
                        .HasForeignKey("MedicoN_Processo");

                    b.HasOne("Hospital_Web.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("Medico_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hospital_Web.Models.Utente", "Utente")
                        .WithMany("Consultas")
                        .HasForeignKey("Utente_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Gabinete");

                    b.Navigation("Medico");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Hospital_Web.Models.Internamento", b =>
                {
                    b.HasOne("Hospital_Web.Models.Consulta", "Consulta")
                        .WithMany()
                        .HasForeignKey("Consulta_Id");

                    b.HasOne("Hospital_Web.Models.QuartosInternagem", "Quarto")
                        .WithMany("Internamentos")
                        .HasForeignKey("Quarto_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital_Web.Models.Utente", "Utente")
                        .WithMany("Internamentos")
                        .HasForeignKey("Utente_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");

                    b.Navigation("Quarto");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Hospital_Web.Models.LimpezaSala", b =>
                {
                    b.HasOne("Hospital_Web.Models.FuncionarioLimpeza", "Funcionario")
                        .WithMany("LimpezasDeSala")
                        .HasForeignKey("Funcionario_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital_Web.Models.Sala", "Sala")
                        .WithMany("LimpezasDeSala")
                        .HasForeignKey("Sala_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("Hospital_Web.Models.Utilizador", b =>
                {
                    b.HasOne("Hospital_Web.Models.Pessoa", "Pessoa")
                        .WithOne("User")
                        .HasForeignKey("Hospital_Web.Models.Utilizador", "Pessoa_Id");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hospital_Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hospital_Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital_Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hospital_Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital_Web.Models.FuncionarioLimpeza", b =>
                {
                    b.HasOne("Hospital_Web.Models.Pessoa", null)
                        .WithOne()
                        .HasForeignKey("Hospital_Web.Models.FuncionarioLimpeza", "N_Processo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital_Web.Models.Medico", b =>
                {
                    b.HasOne("Hospital_Web.Models.Pessoa", null)
                        .WithOne()
                        .HasForeignKey("Hospital_Web.Models.Medico", "N_Processo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital_Web.Models.Utente", b =>
                {
                    b.HasOne("Hospital_Web.Models.Medico", "MedicoAssociado")
                        .WithMany("UtentesAssociados")
                        .HasForeignKey("Medico_Associado_Id");

                    b.HasOne("Hospital_Web.Models.Pessoa", null)
                        .WithOne()
                        .HasForeignKey("Hospital_Web.Models.Utente", "N_Processo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicoAssociado");
                });

            modelBuilder.Entity("Hospital_Web.Models.Pessoa", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Hospital_Web.Models.Sala", b =>
                {
                    b.Navigation("LimpezasDeSala");
                });

            modelBuilder.Entity("Hospital_Web.Models.FuncionarioLimpeza", b =>
                {
                    b.Navigation("LimpezasDeSala");
                });

            modelBuilder.Entity("Hospital_Web.Models.Medico", b =>
                {
                    b.Navigation("Consultas");

                    b.Navigation("UtentesAssociados");
                });

            modelBuilder.Entity("Hospital_Web.Models.Utente", b =>
                {
                    b.Navigation("Consultas");

                    b.Navigation("Internamentos");
                });

            modelBuilder.Entity("Hospital_Web.Models.Gabinete", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("Hospital_Web.Models.QuartosInternagem", b =>
                {
                    b.Navigation("Internamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
